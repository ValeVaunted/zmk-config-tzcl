/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define HOST_OS 1
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/international_chars/greek.dtsi"
#include "../zmk-nodefree-config/international_chars/german.dtsi"

&sk {
    release-after-ms = <750>;
    quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};

#define ___ &trans

#define BASE_L  0
#define SYM   1
#define NUM   2
#define NAV   3
#define LANG_L  4

#define KEYS_LEFT 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24  // left hand
#define KEYS_RIGHT 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29  // right hand
#define THUMBS 30 31 32 33 34 35                        // thumbs

#define DO_CUT   LC(X)
#define DO_COPY  LC(C)
#define DO_PASTE LC(V)

ZMK_UNICODE_SINGLE(sym_lozenge, N2, N5, C, A)
ZMK_UNICODE_SINGLE(sym_estimates, N2, N2, N5, N9)
ZMK_UNICODE_SINGLE(sym_unequal, N2, N2, N6, N0)
ZMK_UNICODE_SINGLE(sym_almost, N2, N2, N4, N8)
ZMK_UNICODE_SINGLE(en_dash, N2, N0, N1, N3)
ZMK_UNICODE_SINGLE(em_dash, N2, N0, N1, N4)

/ {
    macros {
        ZMK_MACRO(scope, wait-ms = <1>; tap-ms = <1>; bindings = <&kp COLON &kp COLON>;)
        ZMK_MACRO(lambda, wait-ms = <1>; tap-ms = <1>; bindings = <&kp L &kp A &kp M &kp B &kp D &kp A>;)
        // ZMK_MACRO(term, wait-ms = <1>; tap-ms = <1>; bindings = <&kp LGUI &kp T &kp E &kp R &kp M &kp RET>;)
    };

    combos {
        compatible = "zmk,combos";

        #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
              combo_##NAME { \
                timeout-ms = <TIMEOUT>; \
                bindings = <BINDINGS>; \
                key-positions = <KEYPOS>; \
              };

        /*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
                  ╰────────────╯ ╰────────────╯        */

        #define COMBO_TIME 20

        COMBO(caps_word_left, &caps_word, 13 14, COMBO_TIME)
        COMBO(caps_word_right, &caps_word, 15 16, COMBO_TIME)

        COMBO(excl, &kp EXCL, 1 11, COMBO_TIME)
        COMBO(grave, &kp GRAVE, 2 12, COMBO_TIME)
        COMBO(scope, &scope, 3 13, COMBO_TIME)
        COMBO(caret, &kp CARET, 4 14, COMBO_TIME)
        COMBO(lpar, &kp LPAR, 11 12, COMBO_TIME)
        COMBO(lbrc, &kp LBRC, 11 13, COMBO_TIME)
        COMBO(lbkt, &kp LBKT, 12 13, COMBO_TIME)
        // free spot: COMBO(.., &kp .., 11 21, ALL)
        COMBO(bslash, &kp BSLH, 12 22, COMBO_TIME)
        COMBO(pipe, &kp PIPE, 13 23, COMBO_TIME)
        COMBO(tilde, &kp TILDE, 14 24, COMBO_TIME)
        COMBO(equal, &kp EQUAL, 21 22, COMBO_TIME)
        COMBO(switch_lang, &sl LANG_L, 21 23, COMBO_TIME)
        COMBO(underscore, &kp UNDER, 22 23, COMBO_TIME)

        COMBO(percent, &kp PRCNT, 5 15, COMBO_TIME)
        COMBO(hash, &kp HASH, 6 16, COMBO_TIME)
        COMBO(semicolon, &kp SEMI, 7 17, COMBO_TIME)
        COMBO(at, &kp AT, 8 18, COMBO_TIME)
        COMBO(rbkt, &kp RBKT, 16 17, COMBO_TIME)
        COMBO(rbrc, &kp RBRC, 16 18, COMBO_TIME)
        COMBO(rpar, &kp RPAR, 17 18, COMBO_TIME)
        COMBO(dollar, &kp DLLR, 15 25, COMBO_TIME)
        COMBO(ampersand, &kp AMPS, 16 26, COMBO_TIME)
        COMBO(plus, &kp PLUS, 17 27, COMBO_TIME)
        COMBO(star, &kp STAR, 18 28, COMBO_TIME)
        COMBO(minus, &kp MINUS, 26 27, COMBO_TIME)
        COMBO(colon, &kp COLON, 27 28, COMBO_TIME)

    };

    behaviors {
        lhm: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <230>;
            quick-tap-ms = <100>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_RIGHT THUMBS>;
        };

        rhm: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <230>;
            quick-tap-ms = <100>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_LEFT THUMBS>;
        };
    };

	keymap {
		compatible = "zmk,keymap";

		alpha_layer {
			bindings = <
                // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                       ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                     &kp Q         &kp W         &kp F         &kp P         &kp B                                                 &kp J         &kp L         &kp U         &kp Y         &kp SEMI                
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                     &kp  A        &mt LCTRL R   &mt LALT S    &mt LGUI T    &kp G                                                 &kp M        &mt LCTRL N    &mt LALT E    &mt LCTRL I  &kp O                
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                     &kp Z         &kp X         &kp C         &kp D         &kp V                                                 &kp K         &kp H         &kp COMMA     &kp DOT       &kp SLASH                
                // ╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤─────────────╮           ╭─────────────├─────────────┼─────────────┼─────────────┴───────────────────────────╯
			 /*&            &*/                             &kp SPACE     &kp BSPC      &kp ENTER                     ---       &kp LSHFT     &mo 1  /*&             &*/
                //                                           ╰─────────────┴─────────────┴─────────────╯           ╰─────────────┴─────────────┴─────────────╯
			>;
		};

          special_layer {
			bindings = <
                // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                       ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                     &kp EXCL      &kp AT        &kp HASH      &kp DOLLAR    &kp PERCENT                                           &kp CARET     &kp LPAR      &kp RPAR      &kp AMPS      &de_ue
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                     &kp  GRAVE    &kp LT        &kp EQUAL     &kp MINUS     &kp SQT                                               &kp STAR      &kp LBKT      &kp RBKT      &kp BSLH      &de_oe
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                     &kp TILDE2    &kp GT        &kp PLUS      &kp UNDER     &kp DQT                                               &kp QUESTION  &kp LBRC      &kp RBRC      &kp PIPE2     &de_ae
                // ╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤─────────────╮           ╭─────────────├─────────────┼─────────────┼─────────────┴───────────────────────────╯
			 /*&            &*/                             &mo 0         &kp ESC      &kp ENTER                      ---      &kp TAB        &kp A  /*&             &*/
                //                                           ╰─────────────┴─────────────┴─────────────╯           ╰─────────────┴─────────────┴─────────────╯
			>;
		};
	};
};
