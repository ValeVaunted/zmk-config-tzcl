/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define HOST_OS 1
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_36keys.h"
#include "../zmk-nodefree-config/international_chars/greek.dtsi"
#include "../zmk-nodefree-config/international_chars/german.dtsi"

&sk {
    release-after-ms = <750>;
    quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};

#define ___ &trans

#define BASE_L  0
#define SYM   1
#define NUM   2
#define NAV   3
#define LANG_L  4

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define DO_CUT   LC(X)
#define DO_COPY  LC(C)
#define Do_PASTE LC(V)

ZMK_UNICODE_SINGLE( sym_lozenge,  N2, N5,  C,  A)

/ {
    macros {
        ZMK_MACRO(scope, wait-ms = <1>; tap-ms = <1>; bindings = <&kp COLON &kp COLON>;)
        ZMK_MACRO(lambda, wait-ms = <1>; tap-ms = <1>; bindings = <&kp L &kp A &kp M &kp B &kp D &kp A>;)
        ZMK_MACRO(term, wait-ms = <1>; tap-ms = <1>; bindings = <&kp LGUI &kp T &kp E &kp R &kp M &kp RET>;)
    };

    combos {
        compatible = "zmk,combos";

        #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
              combo_##NAME { \
                timeout-ms = <TIMEOUT>; \
                bindings = <BINDINGS>; \
                key-positions = <KEYPOS>; \
              };

        /*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
                  ╰────────────╯ ╰────────────╯        */

        #define COMBO_TIME 20

        COMBO(caps_word_left, &caps_word, 13 14, COMBO_TIME)
        COMBO(caps_word_right, &caps_word, 15 16, COMBO_TIME)

        COMBO(grave, &kp GRAVE, 1 2, COMBO_TIME)
        COMBO(scope, &scope, 2 3, COMBO_TIME)
        COMBO(hash, &kp HASH, 6 7, COMBO_TIME)
        COMBO(semicolon, &kp SEMI, 7 8, COMBO_TIME)
        COMBO(equal, &kp EQUAL, 21 22, COMBO_TIME)
        COMBO(colon, &kp COLON, 27 28, COMBO_TIME)

        COMBO(lpar, &kp LPAR, 11 12, COMBO_TIME)
        COMBO(rpar, &kp RPAR, 17 18, COMBO_TIME)
        COMBO(lbkt, &kp LBKT, 12 13, COMBO_TIME)
        COMBO(rbkt, &kp RBKT, 16 17, COMBO_TIME)
        COMBO(lbrc, &kp LBRC, 11 13, COMBO_TIME)
        COMBO(rbrc, &kp RBRC, 16 18, COMBO_TIME)

        COMBO(minus, &kp MINUS, 26 27, COMBO_TIME)
        COMBO(underscore, &kp UNDER, 22 23, COMBO_TIME)
        
        COMBO(switch_lang, &sl LANG_L, 21 23, COMBO_TIME)
    };

    behaviors {
        lhm: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            global-quick-tap-ms = <100>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
        };

        rhm: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            global-quick-tap-ms = <100>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
        };

        b_lt: base_layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BASE_LAYER_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            global-quick-tap-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

    };

	keymap {
		compatible = "zmk,keymap";

		base_layer {
			bindings = <
                // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                     &kp Q         &kp W         &kp F         &kp P         &kp B          &kp J         &kp L         &kp U         &kp Y         &kp APOS
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                     &lhm LALT A   &lhm LGUI R   &lhm LSHFT S  &lhm LCTRL T  &kp G          &kp M         &rhm LCTRL N  &rhm RSHFT E  &rhm LGUI I   &rhm RALT O
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                     &kp Z         &kp X         &kp C         &kp D         &kp V          &kp K         &kp H         &kp COMMA     &kp DOT       &kp FSLH
                // ╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┴───────────────────────────╯
				 /*&            &*/            &b_lt NAV TAB  &b_lt SYM BSPC &b_lt NUM DEL  &b_lt NUM RET &b_lt SYM SPC &b_lt NAV ESC  /*&             &*/
                //                             ╰─────────────┴─────────────┴─────────────╯╰─────────────┴─────────────┴─────────────╯                             
			>;
		};

		sym_layer {
			bindings = <
                // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                    &kp APOS       &de_ae        &de_oe        &de_ue        &kp AMPS       &scope        &sym_lozenge  &kp LBRC      &kp RBRC      &kp UNDER
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                    &kp EXCL       &kp MINUS     &kp PLUS      &kp EQUAL     &kp PIPE       &kp PRCNT     &kp HASH      &kp LPAR      &kp RPAR      &kp AT
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                    &kp CARET      &kp FSLH      &kp STAR      &kp BSLH      &kp TILDE      &lambda       &kp DLLR      &kp LBKT      &kp RBKT      &kp QMARK
                // ╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┴───────────────────────────╯
				 /*&            &*/              ___           ___           ___            ___           ___           ___          /*&             &*/
                //                             ╰─────────────┴─────────────┴─────────────╯╰─────────────┴─────────────┴─────────────╯                             
			>;
		};

		num_layer {
			bindings = <
                // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                     &kp UNDER     &kp N6        &kp N5        &kp N4        &kp PLUS       &kp STAR      &kp F4        &kp F5        &kp F6        &kp F10
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                     &kp DOT       &kp N3        &kp N2        &kp N1        &kp MINUS      &kp LSHFT     &kp F1        &kp F2        &kp F3        &kp F11
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                     &kp COMMA     &kp N9        &kp N8        &kp N7        &kp EQUAL      &kp COLON     &kp F7        &kp F8        &kp F9        &kp F12
                // ╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┴───────────────────────────╯
				 /*&            &*/              ___           ___           &kp N0         &kp N0        ___           ___          /*&             &*/
                //                             ╰─────────────┴─────────────┴─────────────╯╰─────────────┴─────────────┴─────────────╯                             
			>;
		};

		nav_layer {
			bindings = <
                // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                     &term         &kp LGUI(TAB) &kp LGUI(CARET)  ___        &bt BT_CLR     &bt BT_PRV    &bt BT_NXT    ___           ___           &term
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                     &sk LALT      &sk LGUI      &sk LSHFT     &sk LCTRL     ___            ___           &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                     ___           &kp DO_CUT    &kp DO_COPY   &kp DO_PASTE  ___            ___           &kp HOME      &kp K_PREV    &kp K_NEXT    &kp END
                // ╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┴───────────────────────────╯
				 /*&            &*/              ___           ___           ___            ___           ___           ___          /*&             &*/
                //                             ╰─────────────┴─────────────┴─────────────╯╰─────────────┴─────────────┴─────────────╯                             
			>;
		};

		lang_layer {
			bindings = <
                // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                     &el_sigma     &el_omega     &el_phi       &el_pi        &el_beta       &el_epsilon   &el_lambda    &el_upsilon   &el_psi       &de_eszett   
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                     &el_alpha     &el_rho       ___           &el_tau       &el_gamma      &el_mu        &el_nu        ___           &el_iota      &el_omikron  
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                     &el_zeta      &el_xi        &el_chi       &el_delta     &el_theta      &el_kappa     &el_eta       &de_ae        &de_oe        &de_ue       
                // ╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                                                 ___           ___           ___            ___           ___           ___         
                //                             ╰─────────────┴─────────────┴─────────────╯╰─────────────┴─────────────┴─────────────╯                             
			>;
		};
	};
};
